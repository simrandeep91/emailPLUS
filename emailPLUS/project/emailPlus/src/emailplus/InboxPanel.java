/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InboxPanel.java
 *
 * Created on 6 Jul, 2011, 3:32:20 PM
 */

package emailplus;

import emailplus.operations.DBOperations;
import emailplus.pop.ContentManager;
import emailplus.pop.MessageHeader;
import emailplus.pop.SimpleReceiver;
import java.awt.Cursor;
import java.util.ArrayList;
import javax.mail.Part;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.border.TitledBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;

/**
 *
 * @author Vishal
 */
public class InboxPanel extends javax.swing.JPanel implements TableModelListener{


    /** Creates new form InboxPanel */
    private JPanel attachFilePanel=null;
    public static ArrayList al=null;
    private ArrayList deletemailList=null;
    private String username;
    private String password;
    public static SimpleReceiver sr;
    int y=0;
    public static ContentManager contentobj=null;
    private MessageHeader objBean;
    private AbstractTableStructure tableobj=null;
    private boolean[] flag={false};
    public InboxPanel(){
        initComponents();
        txtContent.setEditable(false);
        btnForward.setEnabled(false);
        btnReply.setEnabled(false);
        this.username=MailAccountManager.objBean.getUsername();
        this.password=MailAccountManager.objBean.getPassword();
        showMails();
        attachFilePanel=new JPanel();
        attachFilePanel.setLayout(null);
        attachFilePanel.setBorder(new TitledBorder("Attached Files"));
        contentobj=new ContentManager();
        
    }
    void clear()
    {
        lblFrom.setText("From:");
        lblTo.setText("To:");
        lblSubject.setText("Subject:");
        txtContent.setText("");
        btnForward.setEnabled(false);
        btnReply.setEnabled(false);
    }
    public void showMails()
    {
        //al=(ArrayList)msp.getMessageList();
        if(al==null)
        {
            sr=new SimpleReceiver(false);
            al=sr.receive("pop.gmail.com", username, password);
            clear();
            btnShow.setEnabled(true);
            btnDelete.setEnabled(true);
        }
            if(al.isEmpty())
            {
                lblMessage.setText("there are no new items to show in this folder");
                clear();
                InboxTable.setEnabled(false);
                btnShow.setEnabled(false);
                btnDelete.setEnabled(false);
            }String header[]={"","From","Subject","Sent Date"};
                /*Object data[][]=new Object[al.size()][3];
                for(int i=0;i<al.size();i++)
                {
                    MessageHeader objBean=(MessageHeader)al.get(i);
                    data[i][0]=objBean.getMessageFrom();
                    data[i][1]=objBean.getMessageSubject();
                    data[i][2]=objBean.getMessageSentDate();
                }
                InboxTable=new JTable(data,header);*/
                
                
                //creating new table according to user specified model
                flag=new boolean[al.size()];
                tableobj=new AbstractTableStructure(header, al);
                InboxTable=new JTable(tableobj);
                InboxTable.getColumnModel().getColumn(0).setMaxWidth(35);
                jScrollPane.setViewportView(InboxTable);
                InboxTable.getModel().addTableModelListener(this);
            

    }

    public void tableChanged(TableModelEvent e) {
        int row = e.getFirstRow();
        int column = e.getColumn();
        TableModel model = (TableModel)e.getSource();
        flag[row] = (boolean)model.getValueAt(row, column);
        //System.out.println(row+" "+column+" "+flag[row]);
    }
    public void closeMailAccount()
    {
        sr.closeFolder();
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        InboxTable = new javax.swing.JTable();
        lblFrom = new javax.swing.JLabel();
        lblTo = new javax.swing.JLabel();
        lblSubject = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtContent = new javax.swing.JTextArea();
        btnShow = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnReply = new javax.swing.JButton();
        btnForward = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();

        InboxTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "", "Form", "Subject", "Sent Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(InboxTable);
        InboxTable.getColumnModel().getColumn(0).setMinWidth(45);
        InboxTable.getColumnModel().getColumn(0).setPreferredWidth(45);
        InboxTable.getColumnModel().getColumn(0).setMaxWidth(45);

        lblFrom.setText("From:");

        lblTo.setText("To:");

        lblSubject.setText("Subject:");

        txtContent.setColumns(20);
        txtContent.setRows(5);
        jScrollPane2.setViewportView(txtContent);

        btnShow.setText("Show Detail");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnReply.setText("Reply");
        btnReply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplyActionPerformed(evt);
            }
        });

        btnForward.setText("Forward");
        btnForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnForwardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(lblTo, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(btnShow, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnReply, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnForward, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(303, 303, 303))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1018, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1018, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFrom, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(lblTo, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnReply)
                        .addComponent(btnForward))
                    .addComponent(lblSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        int i=InboxTable.getSelectedRow();
        if(i<0)
        {
            JOptionPane.showMessageDialog(this, "select a row from table", "Error", 2);
        }
        else
        {
            objBean=(MessageHeader)al.get(i);
            if(objBean.getSeenFlag())
                {
                    txtContent.setText(objBean.getMessageContent());
                    showAttachedFiles(objBean);
                }
                else
                {
                    try
                    {
                        //contentobj=new ContentManager();
                        contentobj.getMessageContent(objBean,objBean.getEmailId());
                        //System.out.println(i+"  "+objBean.getEmailId());
                        //msg_content=sr.getMessageContent(i);
                        txtContent.setText(objBean.getMessageContent());
                        showAttachedFiles(objBean);
                        objBean.setSeenFlag(true);
                    }
                    catch(Exception e)
                    {
                        System.out.println(e);
                    }
                }
                lblFrom.setText("From:   "+objBean.getMessageFrom());
                lblTo.setText("To:   "+objBean.getSenderEmailIdName());
                lblSubject.setText("Subject:   "+objBean.getMessageSubject());
                btnForward.setEnabled(true);
                btnReply.setEnabled(true);
                btnDelete.setEnabled(true);
                this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_btnShowActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        sr.closeFolder();
        lblMessage.setText("");
        al=null;
        showMails();
        clear();
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnForwardActionPerformed
        // TODO add your handling code here:
        String subject=objBean.getMessageSubject();
        String content=txtContent.getText();
        MailAccountManager.p.removeAll();
        ComposePanel comobj=new ComposePanel();
        comobj.setBounds(0, 0, 1081, 563);
        comobj.setMessage("", subject, content);
        MailAccountManager.p.add(comobj);
        MailAccountManager.p.setVisible(false);
        MailAccountManager.p.setVisible(true);
    }//GEN-LAST:event_btnForwardActionPerformed

    private void btnReplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplyActionPerformed
        // TODO add your handling code here:
        String subject=objBean.getMessageSubject();
        String receiver=objBean.getSenderEmailIdName();
        MailAccountManager.p.removeAll();
        ComposePanel comobj=new ComposePanel();
        comobj.setBounds(0, 0, 1081, 563);
        comobj.setMessage(receiver, subject, "");
        MailAccountManager.p.add(comobj);
        MailAccountManager.p.setVisible(false);
        MailAccountManager.p.setVisible(true);
    }//GEN-LAST:event_btnReplyActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        deletemailList =new ArrayList(); 
        for(int i=0;i<flag.length;i++)
        {
            MessageHeader mh=new MessageHeader();
            if(flag[i])
            {
                mh=(MessageHeader)al.get(i);
                deletemailList.add(mh);
                al.remove(i);
            }
        }
        if(deletemailList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "mark a row from table", "Error", 2);
            return;
        }
        new DBOperations().addDeletedMailRecord(deletemailList, MailAccountManager.configid);
        sr.deleteMails(flag);
        showMails();
        clear();
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_btnDeleteActionPerformed

    public void showAttachedFiles(MessageHeader objBean)
    {
        ArrayList fileNameList=objBean.getFileNameList();
        if(fileNameList.isEmpty())
        {
            return;
        }
        y=20;
        attachFilePanel.removeAll();
        attachFilePanel.setBounds(10, 656, 1018, fileNameList.size()*20+25);
        for(int i=0;i<fileNameList.size();i++)
        {
            JLabel lblFile=new JLabel();
            lblFile.setBounds(10, y, 500, 20);
            lblFile.setText((i+1)+". "+(String)fileNameList.get(i)+"    Download");
            y+=20;
            lblFile.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    lblFileMouseClicked(evt);
                }
            });
            lblFile.setToolTipText("Click To Download");
            lblFile.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            attachFilePanel.add(lblFile); 
            //filePanel.add(lblFile);
        }
        this.add(attachFilePanel);
        setVisible(false);
        setBounds(0, 0, 1081, 655+fileNameList.size()*45);
        setVisible(true);
     }
    
    private void lblFileMouseClicked(java.awt.event.MouseEvent evt)
    {
        JLabel lbl=(JLabel)evt.getSource();
        //System.out.println(lbl.getText().charAt(0));
        int c=lbl.getText().codePointAt(0)-49;
        Part p=(Part)objBean.getPartList().get(c);
        String filename=null;
        try
        {
            filename=p.getFileName();
            String ext=filename.substring(filename.lastIndexOf("."));
            //System.out.println(ext);
        }
        catch(Exception e){}
         
        
        JFileChooser saveFile=new JFileChooser();
        saveFile.setLocation(250, 250);
        saveFile.showSaveDialog(this);
        String path=saveFile.getSelectedFile().getPath();
        while(saveFile.getSelectedFile().exists())
        {
            JOptionPane.showMessageDialog(this, "file already exist\nchoose another name", "Error", 2);
            saveFile.showSaveDialog(this);
            saveFile.setLocation(250, 250);
        }
        
        String result=contentobj.downloadFile(p,path);
        if(result.equals("complete"))
        {
            JOptionPane.showMessageDialog(this, "download complete", "Message", 1);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "error in downloading file", "Error", 2);
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable InboxTable;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnForward;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnReply;
    private javax.swing.JButton btnShow;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JLabel lblTo;
    private javax.swing.JTextArea txtContent;
    // End of variables declaration//GEN-END:variables

}
