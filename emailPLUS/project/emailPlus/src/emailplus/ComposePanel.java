/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ComposePanel.java
 *
 * Created on 6 Jul, 2011, 3:42:45 PM
 */

package emailplus;

import emailplus.operations.DBOperations;
import emailplus.smtp.SendSMTP;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import emailplus.operations.UserMailBean;
import java.awt.Cursor;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Vishal
 */
public class ComposePanel extends javax.swing.JPanel {

    /** Creates new form ComposePanel */
    private JPanel attachFilePanel=null;
    final long maxsize=10*1024*1024;
    public long mailsize=0;
    public long spaceLeft=0;
    private String receiver="";
    private String subject="";
    private String text="";
    private String username="";
    private String password="";
    private String host="";
    DBOperations obj=null;
    SendSMTP objSend=null;
    ArrayList al=null;
    int x=0,y=0;
    public ComposePanel() {
        initComponents();
        this.username=MailAccountManager.objBean.getUsername();
        this.password=MailAccountManager.objBean.getPassword();
        this.host=MailAccountManager.objBean.getSmtpServer();
        objSend=new SendSMTP();
        al=new ArrayList();
        attachFilePanel=new JPanel();
        attachFilePanel.setLayout(null);
        attachFilePanel.setBorder(new TitledBorder("Attached Files"));

        //lblMessage.setIcon(new ImageIcon(getClass().getResource("emailPLUS.png")));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSend = new javax.swing.JButton();
        btnDiscard = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtTo = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        txtSubject = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtContent = new javax.swing.JTextArea();
        btnAttach = new javax.swing.JButton();
        lblSpaceLeft = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        btnDiscard.setText("Discard");
        btnDiscard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiscardActionPerformed(evt);
            }
        });

        jLabel1.setText("To");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        txtTo.setColumns(20);
        txtTo.setRows(5);
        jScrollPane1.setViewportView(txtTo);

        jLabel2.setText("Subject");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        txtContent.setColumns(20);
        txtContent.setRows(5);
        jScrollPane2.setViewportView(txtContent);

        btnAttach.setText("Attach File");
        btnAttach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttachActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSubject, javax.swing.GroupLayout.DEFAULT_SIZE, 936, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 936, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDiscard, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(btnAttach, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(lblSpaceLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 936, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSend)
                            .addComponent(btnSave)
                            .addComponent(btnDiscard))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAttach)
                    .addComponent(lblSpaceLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        receiver=txtTo.getText();
        subject=txtSubject.getText();
        text=txtContent.getText();
        if(receiver.equals(""))
            JOptionPane.showMessageDialog(this, "enter receiver address", "Error", 2);
        else
        {
        String result=SendSMTP.sendMail(receiver,text,subject,username,password,host);
        if(!result.equals("failed"))
        {
              UserMailBean objBean=new UserMailBean();
              int configId=MailAccountManager.configid;
              objBean.setConfigId(configId);
              objBean.setTo(txtTo.getText());
              objBean.setContent(txtContent.getText());
              objBean.setSubject(txtSubject.getText());
              objBean.setFrom(text);
              Date d=new Date();
              SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String str=sdf.format(d);
              objBean.setDate(str);
              obj=new DBOperations();
              str=obj.addMailRecord(objBean);
              if(!str.equals("failed"))
              {
                  JOptionPane.showMessageDialog(this, "mail sent and record added", "Message", 1);
                  
                  //[--reload compose panel if mail sent successfully
                  MailAccountManager.p.removeAll();
                  ComposePanel cpobj=new ComposePanel();
                  cpobj.setBounds(0, 0, 1081, 563);
                  MailAccountManager.p.add(cpobj);
                  MailAccountManager.p.setVisible(false);
                  MailAccountManager.p.setVisible(true);
              }
        }
        else
        {
              JOptionPane.showMessageDialog(this,"error in sending mail","Error",2);
        }
        }
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnDiscardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiscardActionPerformed
        // TODO add your handling code here:
        //MaintainMailsFrame.p.removeAll();
        //MaintainMailsFrame.p.setVisible(false);
        //MaintainMailsFrame.p.setVisible(true);
        MailAccountManager.p.removeAll();
        MailAccountManager.p.setVisible(false);
        MailAccountManager.p.setVisible(true);
    }//GEN-LAST:event_btnDiscardActionPerformed

    private void btnAttachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttachActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser=new JFileChooser();
        chooser.showOpenDialog(btnAttach);
        String filename=chooser.getSelectedFile().getName();
        String path=chooser.getSelectedFile().getPath();
        //System.out.println(filename+"    "+path);
        String ext="";
        int index = filename.lastIndexOf('.');
        if (index > 0 &&  index < filename.length() - 1) {
            ext = filename.substring(index+1).toLowerCase();
        }
        if(ext.equals("exe"))
        {
            JOptionPane.showMessageDialog(this, "executable file cannot be Attached", "Error", 2);
            return;
        }
        long size=chooser.getSelectedFile().length();
        //mailsize+=size;
        //System.out.println(size+"   "+mailsize);
        if(size==0)
        {
            JOptionPane.showMessageDialog(this, "empty file cannot be Attached", "Error", 2);
            return;
        }
        if((mailsize+size)<maxsize)
        {
            if(objSend.attachFile(path,filename)>0)
            {
                al.add(chooser.getSelectedFile());
                mailsize+=size;
                spaceLeft=(maxsize-mailsize)/1024;
                lblSpaceLeft.setText("Space Left  "+spaceLeft+" KB");
                //JOptionPane.showMessageDialog(this,"file attached click on show detail to view detail","Message",2);
                showFile();
            }
            else
            {
                 JOptionPane.showMessageDialog(this, "File Not Attached", "Error", 2);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "mail size exceedes from limit of 10Mb", "Error", 2);
        }
    }//GEN-LAST:event_btnAttachActionPerformed

    public void showFile()
    {
        y=20;
        attachFilePanel.removeAll();
        attachFilePanel.setBounds(68, 558, 1000, al.size()*20+25);
        long size;
        String fileLen;
        //jPanel.removeAll();
        for(int k=0;k<al.size();k++)
        {
            JLabel lblFile=new JLabel();
            
            File file=(File)al.get(k);
            size=file.length();
            fileLen=size+"  Bytes";
            if(size>1024)
            {
                size/=1024;
                fileLen=size+"  KB";
                if(size>1024)
                {
                    size/=1024;
                    fileLen=size+"  MB";
                }
            }
            String content=k+1+". "+file.getName()+"   ("+fileLen+")"+"   Remove";
            lblFile.setBounds(10, y, 500, 20);
            lblFile.setText(content);
            y+=20;
            lblFile.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    lblFileMouseClicked(evt);
                }
            });
            lblFile.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            //lblFile.TOOL_TIP_TEXT_KEY="Click To Remove";
            lblFile.setToolTipText("Click To Remove");
            attachFilePanel.add(lblFile); 
            //jPanel.add(lblFile);
        }
        this.add(attachFilePanel);
        setVisible(false);
        setBounds(0, 0,1081, 560+al.size()*45);
        setVisible(true);
    }

    private void lblFileMouseClicked(java.awt.event.MouseEvent evt)
    {
        JLabel lbl=(JLabel)evt.getSource();
        //System.out.println(lbl.getText().charAt(0));
        int c=lbl.getText().codePointAt(0)-49;
        //System.out.println(c);
        SendSMTP.removeFile(c);
        File f=(File)al.remove(c);
        mailsize-=f.length();
        spaceLeft=(maxsize-mailsize)/1024;
        lblSpaceLeft.setText("Space Left  "+spaceLeft+" KB");
        showFile();
    }
    public void setMessage(String receiver,String subject,String content)
    {
        if(subject!=null)
        txtSubject.setText(subject);
        if(content!=null)
        txtContent.setText(content);
        if(receiver!=null)
        txtTo.setText(receiver);
    }

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        

        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(txtContent.getText().equals("") & txtSubject.getText().equals("") & txtTo.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "cannot save\none of text fields must have some content", "Error", 2);
            return;
        }
        obj=new DBOperations();
        UserMailBean objBean=new UserMailBean();
        objBean.setContent(txtContent.getText());
        objBean.setTo(txtTo.getText());
        objBean.setSubject(txtSubject.getText());
        String date=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
        objBean.setDate(date);
        objBean.setConfigId(MailAccountManager.configid);
        if(obj.addDraft(objBean).equals("added"))
        {
            JOptionPane.showMessageDialog(this, "your draft has been saved", "Message", 1);
            MailAccountManager.p.removeAll();
                  ComposePanel cpobj=new ComposePanel();
                  cpobj.setBounds(0, 0, 1081, 563);
                  MailAccountManager.p.add(cpobj);
                  MailAccountManager.p.setVisible(false);
                  MailAccountManager.p.setVisible(true);
        }
                
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAttach;
    private javax.swing.JButton btnDiscard;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblSpaceLeft;
    private javax.swing.JTextArea txtContent;
    private javax.swing.JTextField txtSubject;
    private javax.swing.JTextArea txtTo;
    // End of variables declaration//GEN-END:variables

}
